generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id            Int         @id @default(autoincrement())
  phone         String?     @unique
  email         String?     @unique
  name          String
  avatar        String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  token_set     Token[]
  product_set   Product[]
  fav_set       Fav[]
  post_set      Post[]
  answer_set    Answer[]
  wondering_set Wondering[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     Int
  image       String
  name        String
  price       Int
  description String   @db.MediumText
  fav_set     Fav[]
}

model Fav {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user_id    Int
  product_id Int
}

model Post {
  id            Int         @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       Int
  question      String      @db.MediumText
  answer_set    Answer[]
  wondering_set Wondering[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answer    String   @db.MediumText
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   Int
  post      Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id   Int
}

model Wondering {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   Int
  post      Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id   Int
}
